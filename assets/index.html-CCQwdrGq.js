import{g as y,h as k,w as b,t as A,i as f,j as _,_ as g,o as d,c as p,b as i,k as t,n as C,l as h,a as u,d as m,e as S,r as D}from"./app-DR7JBaBv.js";function x(l){const s=y(()=>{const n=A(l),[r="",c=""]=n.split("/");return{owner:r,name:c}}),a=k(null),e=k(!1);async function o(){const{owner:n,name:r}=s.value;if(!n||!r)return;e.value=!1;const c=await fetch(`https://api.pengzhanbo.cn/github/repo/${n}/${r}`).then(v=>v.json());a.value=c,e.value=!0}return b(s,o,{immediate:!0}),{data:a,loaded:e}}const I=f({__name:"RepoCard",props:{repo:{}},setup(l,{expose:s}){s();const a=l,{loaded:e,data:o}=x(_(a,"repo")),n={props:a,loaded:e,data:o};return Object.defineProperty(n,"__isScriptSetup",{enumerable:!1,value:!0}),n}}),W={key:0,class:"vp-repo-card"},B={class:"repo-name"},H={class:"repo-link"},O=["href"],T={class:"repo-visibility"},w={class:"repo-desc"},M={class:"repo-info"},P={key:0},R={key:1};function V(l,s,a,e,o,n){return e.loaded&&e.data?(d(),p("div",W,[i("p",B,[s[0]||(s[0]=i("span",{class:"vpi-github-repo"},null,-1)),i("span",H,[i("a",{href:e.data.url,target:"_blank",rel:"noopener noreferrer",class:"no-icon"},t(e.data.ownerType==="Organization"?e.data.fullName:e.data.name),9,O)]),i("span",T,t(e.data.visibility+(e.data.template?" Template":"")),1)]),i("p",w,t(e.data.description),1),i("div",M,[e.data.language?(d(),p("p",P,[i("span",{class:"repo-language",style:C({"background-color":e.data.languageColor})},null,4),i("span",null,t(e.data.language),1)])):h("",!0),i("p",null,[s[1]||(s[1]=i("span",{class:"vpi-github-star"},null,-1)),i("span",null,t(e.data.stars),1)]),i("p",null,[s[2]||(s[2]=i("span",{class:"vpi-github-fork"},null,-1)),i("span",null,t(e.data.forks),1)]),e.data.license?(d(),p("p",R,[s[3]||(s[3]=i("span",{class:"vpi-github-license"},null,-1)),i("span",null,t(e.data.license.name),1)])):h("",!0)])])):h("",!0)}const N=g(I,[["render",V],["__scopeId","data-v-38dbf696"],["__file","RepoCard.vue"]]),U={__name:"index.html",setup(l,{expose:s}){s();const a={RepoCard:N};return Object.defineProperty(a,"__isScriptSetup",{enumerable:!1,value:!0}),a}};function j(l,s,a,e,o,n){const r=D("CardGrid");return d(),p("div",null,[s[0]||(s[0]=u(`<h2 id="i-准备操作" tabindex="-1"><a class="header-anchor" href="#i-准备操作"><span>I - 准备操作</span></a></h2><ul><li>一个已经刷了<code>OpenWrt / XWrt</code>的路由器</li><li>一台电脑</li><li>一个良好的网络环境</li></ul><h2 id="ii-软件准备" tabindex="-1"><a class="header-anchor" href="#ii-软件准备"><span>II - 软件准备</span></a></h2><ol><li>确保你的电脑具备<code>SSH</code>的功能（通常命令行中都会有这个命令）。</li><li>你需要准备一个能够通过<code>SCP</code>协议传输文件的软件： <ul><li>Windows 可以使用<code>WinSCP</code></li><li>Mac 可以使用<code>Transmit 5</code></li><li>Linux <s>你都用Linux了还要我教吗</s></li></ul></li></ol><h2 id="iii-开启路由器ssh访问" tabindex="-1"><a class="header-anchor" href="#iii-开启路由器ssh访问"><span>III - 开启路由器SSH访问</span></a></h2><ol><li>打开浏览器，输入路由器后台地址<code>OpenWrt: 192.168.1.1</code> / <code>XWrt: 192.168.15.1</code>。</li><li>点击<code>系统</code> - <code>管理权</code>，在SSH访问选项卡下，检查默认端口为<code>22</code>，勾选<code>允许root用户凭密码登录</code>。</li><li>打开系统命令行（CMD），根据系统测试以下命令，密码为管理员密码。</li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li><p><strong>若弹出<code>RSA key fingerprint</code>等提示，输入<code>yes</code>同意即可。</strong></p></li><li><p><strong>你只需要运行带有<code>$</code>标识的命令，复制命令时不需要带上<code>$</code>。</strong></p></li></ul></div><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># For OpenWrt</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ssh</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root@192.168.1.1</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># Or for XWrt</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ssh</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root@192.168.15.1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-查看路由器架构" tabindex="-1"><a class="header-anchor" href="#iii-查看路由器架构"><span>III - 查看路由器架构</span></a></h2><ol><li>登入后输入以下命令查看路由器兼容的架构：</li></ol><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> opkg</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> print-architecture</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 以下为某个路由器的输出例子</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">arch</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> all</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">arch</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> noarch</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">arch</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> aarch64_cortex-a53</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>根据路由器适配的软件架构，前往<a href="https://github.com/KyleRicardo/MentoHUST-OpenWrt-ipk/releases/tag/v0.3.1" target="_blank" rel="noopener noreferrer">Github-MentoHUST-ipk</a>下载对应的MentoHUST插件。</li></ol>`,12)),m(r,null,{default:S(()=>[m(e.RepoCard,{class:"madcard",repo:"KyleRicardo/MentoHUST-OpenWrt-ipk"})]),_:1}),s[1]||(s[1]=u(`<h2 id="iv-导入软件包" tabindex="-1"><a class="header-anchor" href="#iv-导入软件包"><span>IV - 导入软件包</span></a></h2><ol><li>打开<code>WinSCP</code> / <code>Transmit</code>，创建新的连接，选择<code>SCP</code>协议，输入与SSH步骤相同的IP地址（主机名）和密码。</li><li>成功连接后会进入路由器的文件管理界面，先返回到根目录，此时你应该能看到如<code>bin</code>、<code>etc</code>、<code>tmp</code>之类的文件夹。</li><li>将刚刚下载好的<code>ipk包</code>上传到路由器的<code>/tmp</code>文件夹中，最好给他改个比较容易打的名字，方便一会安装时输入路径。（假设你把他改成了就叫<code>mentohust.ipk</code>）</li></ol><h2 id="v-安装软件包" tabindex="-1"><a class="header-anchor" href="#v-安装软件包"><span>V - 安装软件包</span></a></h2><p>返回到刚刚的命令行中，依次输入以下命令：</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> opkg</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> update</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> opkg</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> libpcap</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 以下假设你已经把文件丢在了/tmp文件夹中，同时改名为mentohust.ipk</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> opkg</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /tmp/mentohust.ipk</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vi-xx-启动" tabindex="-1"><a class="header-anchor" href="#vi-xx-启动"><span>VI - XX，启动！</span></a></h2><p>输入以下命令即可启动认证程序，按照程序提示完成校园网参数的输入：</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mentohust</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li><strong>如果发现输入什么它都没有反应，就一直回车随便输入点参数先让他运行，然后退出程序。</strong></li></ul></div><p>如果出现上述注意问题，可以接着看：</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 如果退不出程序无法出现命令行等待输入，可以使用Control + C强制结束</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 由于mentohust默认为后台运行，因此退回来命令行等待输入时，仍然在运行，可以使用以下命令停止验证程序</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mentohust</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -k</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回到WinSCP中，前往<code>/etc/mentohust.conf</code>配置文件，右键打开编辑，手动改写认证参数。</p><p>需要注意的是看看有线网对应的网卡是叫什么名字，比如为<code>eth0.2</code>。</p><p>更改配置文件之后，可以重新用<code>$ mentohust</code>指令启动，按理来说它就能运行。</p><h2 id="vii-注意事项" tabindex="-1"><a class="header-anchor" href="#vii-注意事项"><span>VII - 注意事项</span></a></h2><p>认证程序会跟随路由器开机自动启动，认证失败会自动重新认证，不放心的话可以在每天需要重新认证的时间节点设定路由器自动重启。</p>`,16))])}const X=g(U,[["render",j],["__file","index.html.vue"]]),$=JSON.parse('{"path":"/article/u5560f5g/","title":"MentoHUST | 适用于OpenWrt的锐捷认证食用方法","lang":"zh-CN","frontmatter":{"title":"MentoHUST | 适用于OpenWrt的锐捷认证食用方法","tags":["计算机网络","校园网","Linux"],"createTime":"2024/01/19 21:03:48","permalink":"/article/u5560f5g/","description":"I - 准备操作 一个已经刷了OpenWrt / XWrt的路由器 一台电脑 一个良好的网络环境 II - 软件准备 确保你的电脑具备SSH的功能（通常命令行中都会有这个命令）。 你需要准备一个能够通过SCP协议传输文件的软件： Windows 可以使用WinSCP Mac 可以使用Transmit 5 Linux III - 开启路由器SSH访问 打...","head":[["meta",{"property":"og:url","content":"https://jupiterkwan.github.io/article/u5560f5g/"}],["meta",{"property":"og:site_name","content":"木球小屋"}],["meta",{"property":"og:title","content":"MentoHUST | 适用于OpenWrt的锐捷认证食用方法"}],["meta",{"property":"og:description","content":"I - 准备操作 一个已经刷了OpenWrt / XWrt的路由器 一台电脑 一个良好的网络环境 II - 软件准备 确保你的电脑具备SSH的功能（通常命令行中都会有这个命令）。 你需要准备一个能够通过SCP协议传输文件的软件： Windows 可以使用WinSCP Mac 可以使用Transmit 5 Linux III - 开启路由器SSH访问 打..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"计算机网络"}],["meta",{"property":"article:tag","content":"校园网"}],["meta",{"property":"article:tag","content":"Linux"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MentoHUST | 适用于OpenWrt的锐捷认证食用方法\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":2.96,"words":889},"git":{},"autoDesc":true,"filePathRelative":"02-日常折腾/ruijie-openwrt.md","categoryList":[{"id":"d34942","sort":10000,"name":"02-日常折腾"}],"bulletin":false}');export{X as comp,$ as data};
